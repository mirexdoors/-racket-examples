#| Реализуйте функцию same-parity?, которая принимает на вход два числа и возвращает #t в том случае если их четность совпадает.
 В ином случае возвращается #f.
 Воспользуйтесь логическими операторами и встроенными функциями odd? и even?.  |#

#lang racket

(provide (all-defined-out))

#| BEGIN (write your solution here) |#
(define (same-parity? x y)
  (or
   (and (odd? x) (odd? y))
   (and (even? x) (even? y))
   )
  )
#| END |#


#|Реализуйте функцию do-today, которая принимает порядковый номер дня недели (целое число) в качестве аргумента и вычисляется в

  строку "work" для дней с понедельника (1) по пятницу (5),
  строку "rest" для субботы (6) и воскресенья (7),
  строку "???" для всех остальных значений, в том числе и для нечисловых!  |#

 #| BEGIN (write your solution here) |#
 (define (do-today n)
   (if (integer? n)
       (cond
             [(< n 1 ) "???"]
             [(< n 6) "work"]
             [(< n 8) "rest"]
             [else "???"])
       "???"
       )
   )
 #| END |#

